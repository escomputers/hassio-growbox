################################################################################
# Use only this section for initial calibration
# sensor:
#   - platform: pulse_counter
#     pin:
#       number: GPIO12
#       # Enable internal pull-up resistor for stable readings
#       mode:
#         input: true
#         pullup: true
#     name: 'pulses per min'
#     id: water_usage_meter
#     # Interval to update the flow rate sensor data
#     update_interval: 60s
################################################################################


# A global variable that stores the "non-resettable" pulse count
globals:
  - id: global_pulses
    # Using `long` ensures sufficient capacity (32 bits on ESP devices) to handle
    # large pulse counts without overflow. It provides a safer
    # alternative to `int`, which may vary in size across platforms
    type: long
    restore_value: true  # Saves the current count to flash so it is not lost on reboot

# Reference: https://esphome.io/components/sensor/pulse_counter.html
sensor:
  # The main pulse_counter sensor for reading pulses
  - platform: pulse_counter
    pin:
      number: GPIO12
      # Enable internal pull-up resistor for stable readings
      mode:
        input: true
        pullup: true
    unit_of_measurement: 'L/min'
    icon: "mdi:water"
    name: "Water flow rate"
    id: water_usage_meter
    # Interval to update the flow rate sensor data
    update_interval: 60s

    # Convert pulses/minute to liters/minute
    # Calibration constant (K) = 1596.35635625 pulses per liter
    # Pulses/L = 1/K
    filters:
      - multiply: 0.00062642654

    # Create an additional resettable entity that accumulates total pulses
    # This sensor can be reset via the Home Assistant service: counter.reset
    total:
      name: "Total used water (resettable counter)"
      id: water_volume_counter_resettable
      unit_of_measurement: "L"
      device_class: "volume"
      state_class: "total_increasing"

    # "on_value" increments the global variable 'global_pulses' every time a pulse is detected
    # This allows us to track a separate, non-resettable total
    on_value:
      - lambda: |-
          id(global_pulses) += 1;

  # A template sensor that reads the global 'global_pulses' variable
  # This sensor is never reset 
  # it only changes if you manually override global_pulses in the code
  - platform: template
    name: "Total used water"
    id: water_volume_counter
    unit_of_measurement: "L"
    device_class: "volume"
    state_class: "total_increasing"
    lambda: |-
      return id(global_pulses) * 0.00062642654;


# Action to reset the resettable entity water_volume_counter_resettable
api:
  services:
    - service: reset_water_volume_counter_resettable
      then:
        # 1) Reset "water_flow_rate" instant counter
        - pulse_counter.set_total_pulses:
            id: water_usage_meter
            value: 0
        - sensor.template.publish:
            id: water_volume_counter_resettable
            state: 0

